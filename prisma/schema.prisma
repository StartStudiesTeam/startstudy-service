generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  password         String
  nickName         String             @unique @map("nick_name")
  phoneNumber      String?            @map("phone_number")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime?          @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime?          @map("deleted_at") @db.Timestamp(6)
  verifyMail       Boolean            @default(false) @map("verify_mail")
  Bookmarks        Bookmarks[]
  CodeToken        CodeToken[]
  Comments         Comments[]
  CommentsComments CommentsComments[]
  Likes            Likes[]
  RefreshToken     RefreshToken[]
  Roadmap          Roadmap[]
  Videos           Videos[]

  @@map("users")
}

model CodeToken {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  codeToken      String    @map("code_token") @db.VarChar(6)
  confirmationAt DateTime? @map("confirmation_at") @db.Timestamp(6)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @map("updated_at") @db.Timestamp(6)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamp(6)
  Users          Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("code_token")
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int
  usersId   String
  Users     Users  @relation(fields: [usersId], references: [id])

  @@map("refresh_token")
}

model Videos {
  id            String          @id @default(uuid())
  video         String
  title         String
  description   String?
  amount_like   Int?
  userOwnerID   String          @map("user_owner_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @map("updated_at") @db.Timestamp(6)
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamp(6)
  Bookmarks     Bookmarks[]
  Comments      Comments[]
  Likes         Likes[]
  Users         Users           @relation(fields: [userOwnerID], references: [id])
  VideosRoadmap VideosRoadmap[]

  @@map("videos")
}

model Roadmap {
  id            String          @id @default(uuid())
  title         String
  description   String?
  userId        String          @map("user_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @map("updated_at") @db.Timestamp(6)
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamp(6)
  Bookmarks     Bookmarks[]
  Comments      Comments[]
  Likes         Likes[]
  Users         Users           @relation(fields: [userId], references: [id])
  Tags          Tags[]
  VideosRoadmap VideosRoadmap[]

  @@map("roadmap")
}

model VideosRoadmap {
  id        String    @id @default(uuid())
  roadmapId String    @map("roadmap_id")
  videoId   String    @map("video_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
  Roadmap   Roadmap   @relation(fields: [roadmapId], references: [id])
  Videos    Videos    @relation(fields: [videoId], references: [id])

  @@map("videos_roadmap")
}

model Comments {
  id               String             @id @default(uuid())
  userId           String             @map("user_id")
  videoId          String             @map("video_id")
  roadmapId        String             @map("roadmap_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime?          @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime?          @map("deleted_at") @db.Timestamp(6)
  comments         String             @map("comments")
  Roadmap          Roadmap            @relation(fields: [roadmapId], references: [id])
  Users            Users              @relation(fields: [userId], references: [id])
  Videos           Videos             @relation(fields: [videoId], references: [id])
  CommentsComments CommentsComments[]
  Likes            Likes[]

  @@map("comments")
}

model CommentsComments {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  commentsId       String    @map("comments_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamp(6)
  CommentsComments String    @map("comments_comments")
  Comments         Comments  @relation(fields: [commentsId], references: [id])
  Users            Users     @relation(fields: [userId], references: [id])
  Likes            Likes[]

  @@map("comments_comments")
}

model Likes {
  id                 String           @id @default(uuid())
  userId             String           @map("user_id")
  videoId            String           @map("video_id")
  roadmapId          String           @map("roadmap_id")
  commentsId         String           @map("comments_id")
  commentscommentsId String           @map("comments_comments_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime?        @map("updated_at") @db.Timestamp(6)
  deletedAt          DateTime?        @map("deleted_at") @db.Timestamp(6)
  likes              Boolean          @default(false) @map("likes")
  CommentsComments   CommentsComments @relation(fields: [commentscommentsId], references: [id])
  Comments           Comments         @relation(fields: [commentsId], references: [id])
  Roadmap            Roadmap          @relation(fields: [roadmapId], references: [id])
  Users              Users            @relation(fields: [userId], references: [id])
  Videos             Videos           @relation(fields: [videoId], references: [id])

  @@map("likes")
}

model Bookmarks {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  videoId   String    @map("video_id")
  roadmapId String    @map("roadmap_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
  Roadmap   Roadmap   @relation(fields: [roadmapId], references: [id])
  Users     Users     @relation(fields: [userId], references: [id])
  Videos    Videos    @relation(fields: [videoId], references: [id])

  @@map("bookmarks")
}

model Tags {
  id        String    @id @default(uuid())
  roadmapId String    @map("roadmap_id")
  tag       String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)
  Roadmap   Roadmap   @relation(fields: [roadmapId], references: [id])

  @@map("tags")
}
